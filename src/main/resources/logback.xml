<?xml version="1.0" encoding="UTF-8"?>


<!--scan="true" 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!--scanPeriod="60 seconds"  设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!--debug="false" 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" debug="true">
    <property name="APP_Name" value="video-cloud-base-platform-api"/>



    <contextName>${APP_Name}</contextName>
    <!--
    获取时间戳字符串：<timestamp>
两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
例如将解析配置文件的时间作为上下文名称
    -->
    <timestamp key="byDay" datePattern="yyyyMMdd"/>
    <property name="logPath" value="./logs/log-${byDay}" />
    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

    <!-- 控制台日志配置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} %msg%n
            </Pattern>
        </encoder>
    </appender>

    <!-- 写文件日志配置-->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!--如果是 true，日志被追加到文件结尾 默认是true -->
        <append>true</append>
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
        <file>${logPath}</file>
        <!--对记录事件进行格式-->
        <encoder>
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} %msg%n
            </Pattern>
        </encoder>
    </appender>

    <!--
    设置root
也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
    -->
    <root level="ERROR">
        <!-- 可以包含多个 appender 。。。 -->
        <appender-ref ref="STDOUT"/>  <!--将日志输出到控制台-->
        <appender-ref ref="FILE"/>  <!--将日志输出到文件-->
    </root>

    <!--
用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
name:用来指定受此loger约束的某一个包或者具体的某一个类。
level:用来设置打印级别（日志级别），大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
addtivity:是否向上级loger传递打印信息。默认是true。
<loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
 -->
    <logger name="com.anyun.cloud" level="ALL" additivity="false">
        <appender-ref ref="STDOUT"/>  <!--将日志输出到控制台-->
        <appender-ref ref="FILE"/>    <!--将日志输出到日志文件-->
    </logger>
</configuration>